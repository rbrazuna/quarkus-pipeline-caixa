DOCUMENTAÇÃO TÉCNICA — Desafio DevSecOps (Quarkus em Minikube)
Atualizado em: 21/08/2025 22:49

========================================
1) VISÃO GERAL E ENTREGÁVEIS
========================================
Este repositório contém uma aplicação Quarkus (getting-started) empacotada em Docker e implantada em um cluster Kubernetes local (Minikube), com dois ambientes:
- DES (Desenvolvimento): roda versões SNAPSHOT (ex.: 1.0.2-SNAPSHOT).
- PRD (Produção): roda versões estáveis (ex.: 1.0.1).

Entregáveis atendidos:
- Cluster Kubernetes local provisionado (Minikube).
- Pipeline local de automação (scripts em PowerShell).
- Compilação da aplicação (Maven) e empacotamento do artefato.
- Imagens de container geradas a partir do pacote.
- Implantação em DES e PRD.
- Documentação técnica: passo a passo, comandos, versionamento, validação.

========================================
2) PRÉ-REQUISITOS
========================================
- Windows 10/11 com:
  • Docker Desktop
  • Minikube (driver: docker)
  • kubectl
  • Java 17 (Temurin) e Maven 3.9+
- (Opcional) WSL (Ubuntu) para rodar plugins do Maven, como versions:set.
- Acesso ao GitHub (para versionamento e release).

========================================
3) ESTRUTURA DO REPOSITÓRIO
========================================
getting-started/
├─ Dockerfile
├─ deployment-des.yaml
├─ service-des.yaml
├─ deployment-prd.yaml
├─ service-prd.yaml
├─ scripts/
│  ├─ build.ps1
│  ├─ deploy-des.ps1
│  └─ deploy-prd.ps1
├─ pom.xml
└─ src/…

========================================
4) PROVISIONAMENTO DO CLUSTER E NAMESPACES
========================================
Abra um PowerShell e execute:
- Iniciar o Minikube e setar contexto:
  minikube start --driver=docker
  kubectl config use-context minikube
- Criar namespaces (idempotente):
  kubectl create namespace des
  kubectl create namespace prd
- Conferir:
  kubectl get namespaces

========================================
5) BUILD DA APLICAÇÃO E IMAGEM
========================================
Na raiz do projeto:
- Usando script (recomendado):
  powershell -ExecutionPolicy Bypass -File .\scripts\build.ps1
  • Compila com Maven (sem testes): mvn clean package -DskipTests
  • Constrói a imagem: docker build -t rb/getting-started:<tag> -f Dockerfile .
  • Carrega a imagem no cluster: minikube image load rb/getting-started:<tag>
  • A tag é lida do pom.xml (ex.: 1.0.2-SNAPSHOT).

- Alternativa manual (exemplo):
  mvn clean package -DskipTests
  docker build -t rb/getting-started:1.0.2-SNAPSHOT -f Dockerfile .
  minikube image load rb/getting-started:1.0.2-SNAPSHOT

========================================
6) DEPLOY EM DES
========================================
- Usando script:
  powershell -ExecutionPolicy Bypass -File .\scripts\deploy-des.ps1
  • Aplica/atualiza manifests (deployment/service) no namespace des.
  • Ajusta a imagem do Deployment para a tag corrente (ex.: 1.0.2-SNAPSHOT).
  • Aguarda o rollout concluir.

- Teste via túnel (recomendado no Windows + driver docker):
  minikube service getting-started-svc-des -n des --url
  curl http://127.0.0.1:<porta>/hello

- Alternativa NodePort (pode não ser acessível direto no host com driver docker):
  IP:   minikube ip
  PORT: kubectl get svc getting-started-svc-des -n des -o jsonpath="{.spec.ports[0].nodePort}"
  Monte a URL: http://<IP>:<PORT>/hello

- Port-forward (fallback universal):
  kubectl port-forward svc/getting-started-svc-des 8080:8080 -n des
  curl http://127.0.0.1:8080/hello

========================================
7) PROMOÇÃO PARA PRD
========================================
- Usando script (converte SNAPSHOT → estável automaticamente):
  powershell -ExecutionPolicy Bypass -File .\scripts\deploy-prd.ps1
  • Retag local: docker tag rb/getting-started:X.Y.Z-SNAPSHOT rb/getting-started:X.Y.Z
  • Carrega imagem estável no Minikube: minikube image load rb/getting-started:X.Y.Z
  • Aplica/atualiza manifests em prd e faz o rollout.

- Teste via túnel:
  minikube service getting-started-svc-prd -n prd --url
  curl http://127.0.0.1:<porta>/hello

========================================
8) ESTRATÉGIA DE VERSIONAMENTO (SemVer)
========================================
- Formato: MAJOR.MINOR.PATCH
  • PATCH (Z+1): correções compatíveis — ex.: 1.0.1 → 1.0.2
  • MINOR (Y+1): novas features compatíveis — ex.: 1.0.2 → 1.1.0
  • MAJOR (X+1): mudanças incompatíveis — ex.: 1.x → 2.0.0

- Fluxo recomendado:
  • DES roda snapshot: X.Y.Z-SNAPSHOT (ex.: 1.0.2-SNAPSHOT).
  • Aprovado? PRD recebe estável: X.Y.Z (ex.: 1.0.2) e é criada a tag Git: vX.Y.Z.
  • Próximo ciclo em DES: X.Y.(Z+1)-SNAPSHOT.

- Comandos úteis (WSL/Git Bash para Versions Plugin):
  mvn versions:set -DnewVersion=1.0.3-SNAPSHOT
  mvn -q versions:commit
  # conferir a versão atual
  mvn -q help:evaluate -Dexpression=project.version -DforceStdout

- Tag no Git quando promover PRD:
  git tag v1.0.2
  git push origin v1.0.2

========================================
9) SCRIPTS DE AUTOMAÇÃO (PowerShell)
========================================
- scripts\build.ps1
  • Compila, gera a imagem rb/getting-started:<tag> e carrega no Minikube.
- scripts\deploy-des.ps1
  • Aplica manifests de DES e faz rollout com a tag corrente.
- scripts\deploy-prd.ps1
  • Retira “-SNAPSHOT” (retag), carrega no Minikube e faz rollout em PRD.

Uso típico:
  powershell -ExecutionPolicy Bypass -File .\scripts\build.ps1
  powershell -ExecutionPolicy Bypass -File .\scripts\deploy-des.ps1
  powershell -ExecutionPolicy Bypass -File .\scripts\deploy-prd.ps1

========================================
10) MANIFESTS E DOCKERFILE (REFERÊNCIA)
========================================
- Dockerfile (base Temurin 17, caminho /deployments com quarkus-run.jar):
  FROM eclipse-temurin:17-jdk-jammy
  WORKDIR /deployments
  COPY target/quarkus-app/ /deployments/
  EXPOSE 8080
  CMD ["java", "-jar", "quarkus-run.jar"]

- deployment-des.yaml (trechos relevantes):
  • image: rb/getting-started:1.0.2-SNAPSHOT
  • securityContext: runAsNonRoot: true, readOnlyRootFilesystem: true
  • volumes: emptyDir para /tmp
  • probes: readiness e liveness em /hello:8080

- deployment-prd.yaml (trechos relevantes):
  • image: rb/getting-started:1.0.1
  • Demais configurações iguais às de DES (securityContext, probes, resources, /tmp).

========================================
11) VALIDAÇÃO
========================================
- Verificar pods e deployments:
  kubectl get pods -n des
  kubectl get deploy -n des
  kubectl get svc -n des
- Logs rápidos:
  kubectl logs -n des deploy/getting-started-des -c getting-started --tail=100
- Testes HTTP (após obter a URL via túnel ou NodePort/port-forward):
  curl http://127.0.0.1:<porta>/hello

========================================
12) SEGURANÇA E BOAS PRÁTICAS
========================================
- Containers não-root (runAsNonRoot, runAsUser).
- Filesystem somente leitura (readOnlyRootFilesystem) + exceção controlada para /tmp via emptyDir.
- Probes (readiness/liveness) para saúde e rollout seguro.
- Limits/requests de CPU e memória.
- .dockerignore adequado para não enviar arquivos desnecessários ao build.

========================================
13) TROUBLESHOOTING
========================================
- “The connection to the server localhost:8080 was refused”:
  • Execute: minikube start --driver=docker
  • kubectl config use-context minikube
- NodePort inacessível no Windows (driver docker):
  • Use: minikube service <svc> -n <ns> --url
  • Ou: kubectl port-forward svc/<svc> 8080:8080 -n <ns>
- POM com conflito (marcadores <<<<<<<, =======, >>>>>>>):
  • Remova os marcadores, corrija <version>, rode: mvn -e validate
- “Imagem não encontrada no cluster”:
  • Rode antes: minikube image load rb/getting-started:<tag>
- Scripts PowerShell:
  • Execute com: powershell -ExecutionPolicy Bypass -File .\scripts\<script>.ps1
  • Garanta que está na RAIZ do projeto ao chamar os scripts (eles ajustam o diretório).

========================================
14) ESTADO FINAL (EXEMPLO)
========================================
- DES: 1.0.2-SNAPSHOT em execução, endpoint /hello OK via túnel do minikube.
- PRD: 1.0.1 em execução, endpoint /hello OK via túnel do minikube.
- Tag da release: v1.0.1 publicada no GitHub.

FIM
